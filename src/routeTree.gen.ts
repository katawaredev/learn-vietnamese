/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PronunciationIndexRouteImport } from './routes/pronunciation/index'
import { Route as PronunciationVowelsRouteImport } from './routes/pronunciation/vowels'
import { Route as PronunciationTonesRouteImport } from './routes/pronunciation/tones'
import { Route as PronunciationDoubleVowelsRouteImport } from './routes/pronunciation/double-vowels'
import { Route as PronunciationConsonantsRouteImport } from './routes/pronunciation/consonants'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PronunciationIndexRoute = PronunciationIndexRouteImport.update({
  id: '/pronunciation/',
  path: '/pronunciation/',
  getParentRoute: () => rootRouteImport,
} as any)
const PronunciationVowelsRoute = PronunciationVowelsRouteImport.update({
  id: '/pronunciation/vowels',
  path: '/pronunciation/vowels',
  getParentRoute: () => rootRouteImport,
} as any)
const PronunciationTonesRoute = PronunciationTonesRouteImport.update({
  id: '/pronunciation/tones',
  path: '/pronunciation/tones',
  getParentRoute: () => rootRouteImport,
} as any)
const PronunciationDoubleVowelsRoute =
  PronunciationDoubleVowelsRouteImport.update({
    id: '/pronunciation/double-vowels',
    path: '/pronunciation/double-vowels',
    getParentRoute: () => rootRouteImport,
  } as any)
const PronunciationConsonantsRoute = PronunciationConsonantsRouteImport.update({
  id: '/pronunciation/consonants',
  path: '/pronunciation/consonants',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pronunciation/consonants': typeof PronunciationConsonantsRoute
  '/pronunciation/double-vowels': typeof PronunciationDoubleVowelsRoute
  '/pronunciation/tones': typeof PronunciationTonesRoute
  '/pronunciation/vowels': typeof PronunciationVowelsRoute
  '/pronunciation': typeof PronunciationIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pronunciation/consonants': typeof PronunciationConsonantsRoute
  '/pronunciation/double-vowels': typeof PronunciationDoubleVowelsRoute
  '/pronunciation/tones': typeof PronunciationTonesRoute
  '/pronunciation/vowels': typeof PronunciationVowelsRoute
  '/pronunciation': typeof PronunciationIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pronunciation/consonants': typeof PronunciationConsonantsRoute
  '/pronunciation/double-vowels': typeof PronunciationDoubleVowelsRoute
  '/pronunciation/tones': typeof PronunciationTonesRoute
  '/pronunciation/vowels': typeof PronunciationVowelsRoute
  '/pronunciation/': typeof PronunciationIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pronunciation/consonants'
    | '/pronunciation/double-vowels'
    | '/pronunciation/tones'
    | '/pronunciation/vowels'
    | '/pronunciation'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pronunciation/consonants'
    | '/pronunciation/double-vowels'
    | '/pronunciation/tones'
    | '/pronunciation/vowels'
    | '/pronunciation'
  id:
    | '__root__'
    | '/'
    | '/pronunciation/consonants'
    | '/pronunciation/double-vowels'
    | '/pronunciation/tones'
    | '/pronunciation/vowels'
    | '/pronunciation/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PronunciationConsonantsRoute: typeof PronunciationConsonantsRoute
  PronunciationDoubleVowelsRoute: typeof PronunciationDoubleVowelsRoute
  PronunciationTonesRoute: typeof PronunciationTonesRoute
  PronunciationVowelsRoute: typeof PronunciationVowelsRoute
  PronunciationIndexRoute: typeof PronunciationIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pronunciation/': {
      id: '/pronunciation/'
      path: '/pronunciation'
      fullPath: '/pronunciation'
      preLoaderRoute: typeof PronunciationIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pronunciation/vowels': {
      id: '/pronunciation/vowels'
      path: '/pronunciation/vowels'
      fullPath: '/pronunciation/vowels'
      preLoaderRoute: typeof PronunciationVowelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pronunciation/tones': {
      id: '/pronunciation/tones'
      path: '/pronunciation/tones'
      fullPath: '/pronunciation/tones'
      preLoaderRoute: typeof PronunciationTonesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pronunciation/double-vowels': {
      id: '/pronunciation/double-vowels'
      path: '/pronunciation/double-vowels'
      fullPath: '/pronunciation/double-vowels'
      preLoaderRoute: typeof PronunciationDoubleVowelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pronunciation/consonants': {
      id: '/pronunciation/consonants'
      path: '/pronunciation/consonants'
      fullPath: '/pronunciation/consonants'
      preLoaderRoute: typeof PronunciationConsonantsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PronunciationConsonantsRoute: PronunciationConsonantsRoute,
  PronunciationDoubleVowelsRoute: PronunciationDoubleVowelsRoute,
  PronunciationTonesRoute: PronunciationTonesRoute,
  PronunciationVowelsRoute: PronunciationVowelsRoute,
  PronunciationIndexRoute: PronunciationIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
